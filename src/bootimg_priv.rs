// Copyright 2023, The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* automatically generated by rust-bindgen 0.65.1 */
use zerocopy::{AsBytes, FromBytes};

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const BOOT_MAGIC: &[u8; 9usize] = b"ANDROID!\0";
pub const BOOT_MAGIC_SIZE: u32 = 8;
pub const BOOT_NAME_SIZE: u32 = 16;
pub const BOOT_ARGS_SIZE: u32 = 512;
pub const BOOT_EXTRA_ARGS_SIZE: u32 = 1024;
pub const VENDOR_BOOT_MAGIC: &[u8; 9usize] = b"VNDRBOOT\0";
pub const VENDOR_BOOT_MAGIC_SIZE: u32 = 8;
pub const VENDOR_BOOT_ARGS_SIZE: u32 = 2048;
pub const VENDOR_BOOT_NAME_SIZE: u32 = 16;
pub const VENDOR_RAMDISK_TYPE_NONE: u32 = 0;
pub const VENDOR_RAMDISK_TYPE_PLATFORM: u32 = 1;
pub const VENDOR_RAMDISK_TYPE_RECOVERY: u32 = 2;
pub const VENDOR_RAMDISK_TYPE_DLKM: u32 = 3;
pub const VENDOR_RAMDISK_NAME_SIZE: u32 = 32;
pub const VENDOR_RAMDISK_TABLE_ENTRY_BOARD_ID_SIZE: u32 = 16;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<__fsid_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__fsid_t), "::", stringify!(__val))
    );
}
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct boot_img_hdr_v0 {
    pub magic: [u8; 8usize],
    pub kernel_size: u32,
    pub kernel_addr: u32,
    pub ramdisk_size: u32,
    pub ramdisk_addr: u32,
    pub second_size: u32,
    pub second_addr: u32,
    pub tags_addr: u32,
    pub page_size: u32,
    pub header_version: u32,
    pub os_version: u32,
    pub name: [u8; 16usize],
    pub cmdline: [u8; 512usize],
    pub id: [u32; 8usize],
    pub extra_cmdline: [u8; 1024usize],
}
#[test]
fn bindgen_test_layout_boot_img_hdr_v0() {
    const UNINIT: ::core::mem::MaybeUninit<boot_img_hdr_v0> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<boot_img_hdr_v0>(),
        1632usize,
        concat!("Size of: ", stringify!(boot_img_hdr_v0))
    );
    assert_eq!(
        ::core::mem::align_of::<boot_img_hdr_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(boot_img_hdr_v0))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(magic))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernel_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(kernel_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernel_addr) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(kernel_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_size) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(ramdisk_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_addr) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(ramdisk_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).second_size) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(second_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).second_addr) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(second_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tags_addr) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(tags_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(page_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_version) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(header_version))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).os_version) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(os_version))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmdline) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(cmdline))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        576usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extra_cmdline) as usize - ptr as usize },
        608usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v0), "::", stringify!(extra_cmdline))
    );
}
impl Default for boot_img_hdr_v0 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type boot_img_hdr = boot_img_hdr_v0;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct boot_img_hdr_v1 {
    pub _base: boot_img_hdr_v0,
    pub recovery_dtbo_size: u32,
    pub recovery_dtbo_offset: u64,
    pub header_size: u32,
}
#[test]
fn bindgen_test_layout_boot_img_hdr_v1() {
    const UNINIT: ::core::mem::MaybeUninit<boot_img_hdr_v1> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<boot_img_hdr_v1>(),
        1648usize,
        concat!("Size of: ", stringify!(boot_img_hdr_v1))
    );
    assert_eq!(
        ::core::mem::align_of::<boot_img_hdr_v1>(),
        1usize,
        concat!("Alignment of ", stringify!(boot_img_hdr_v1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).recovery_dtbo_size) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_img_hdr_v1),
            "::",
            stringify!(recovery_dtbo_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).recovery_dtbo_offset) as usize - ptr as usize },
        1636usize,
        concat!(
            "Offset of field: ",
            stringify!(boot_img_hdr_v1),
            "::",
            stringify!(recovery_dtbo_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        1644usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v1), "::", stringify!(header_size))
    );
}
impl Default for boot_img_hdr_v1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct boot_img_hdr_v2 {
    pub _base: boot_img_hdr_v1,
    pub dtb_size: u32,
    pub dtb_addr: u64,
}
#[test]
fn bindgen_test_layout_boot_img_hdr_v2() {
    const UNINIT: ::core::mem::MaybeUninit<boot_img_hdr_v2> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<boot_img_hdr_v2>(),
        1660usize,
        concat!("Size of: ", stringify!(boot_img_hdr_v2))
    );
    assert_eq!(
        ::core::mem::align_of::<boot_img_hdr_v2>(),
        1usize,
        concat!("Alignment of ", stringify!(boot_img_hdr_v2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dtb_size) as usize - ptr as usize },
        1648usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v2), "::", stringify!(dtb_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dtb_addr) as usize - ptr as usize },
        1652usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v2), "::", stringify!(dtb_addr))
    );
}
impl Default for boot_img_hdr_v2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct boot_img_hdr_v3 {
    pub magic: [u8; 8usize],
    pub kernel_size: u32,
    pub ramdisk_size: u32,
    pub os_version: u32,
    pub header_size: u32,
    pub reserved: [u32; 4usize],
    pub header_version: u32,
    pub cmdline: [u8; 1536usize],
}
#[test]
fn bindgen_test_layout_boot_img_hdr_v3() {
    const UNINIT: ::core::mem::MaybeUninit<boot_img_hdr_v3> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<boot_img_hdr_v3>(),
        1580usize,
        concat!("Size of: ", stringify!(boot_img_hdr_v3))
    );
    assert_eq!(
        ::core::mem::align_of::<boot_img_hdr_v3>(),
        1usize,
        concat!("Alignment of ", stringify!(boot_img_hdr_v3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(magic))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernel_size) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(kernel_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_size) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(ramdisk_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).os_version) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(os_version))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(header_size))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(reserved))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_version) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(header_version))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmdline) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v3), "::", stringify!(cmdline))
    );
}
impl Default for boot_img_hdr_v3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct vendor_boot_img_hdr_v3 {
    pub magic: [u8; 8usize],
    pub header_version: u32,
    pub page_size: u32,
    pub kernel_addr: u32,
    pub ramdisk_addr: u32,
    pub vendor_ramdisk_size: u32,
    pub cmdline: [u8; 2048usize],
    pub tags_addr: u32,
    pub name: [u8; 16usize],
    pub header_size: u32,
    pub dtb_size: u32,
    pub dtb_addr: u64,
}
#[test]
fn bindgen_test_layout_vendor_boot_img_hdr_v3() {
    const UNINIT: ::core::mem::MaybeUninit<vendor_boot_img_hdr_v3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<vendor_boot_img_hdr_v3>(),
        2112usize,
        concat!("Size of: ", stringify!(vendor_boot_img_hdr_v3))
    );
    assert_eq!(
        ::core::mem::align_of::<vendor_boot_img_hdr_v3>(),
        1usize,
        concat!("Alignment of ", stringify!(vendor_boot_img_hdr_v3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vendor_boot_img_hdr_v3), "::", stringify!(magic))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(header_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).kernel_addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(kernel_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_addr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(ramdisk_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vendor_ramdisk_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(vendor_ramdisk_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cmdline) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(vendor_boot_img_hdr_v3), "::", stringify!(cmdline))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tags_addr) as usize - ptr as usize },
        2076usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(tags_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2080usize,
        concat!("Offset of field: ", stringify!(vendor_boot_img_hdr_v3), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).header_size) as usize - ptr as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(header_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dtb_size) as usize - ptr as usize },
        2100usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(dtb_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).dtb_addr) as usize - ptr as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v3),
            "::",
            stringify!(dtb_addr)
        )
    );
}
impl Default for vendor_boot_img_hdr_v3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct boot_img_hdr_v4 {
    pub _base: boot_img_hdr_v3,
    pub signature_size: u32,
}
#[test]
fn bindgen_test_layout_boot_img_hdr_v4() {
    const UNINIT: ::core::mem::MaybeUninit<boot_img_hdr_v4> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<boot_img_hdr_v4>(),
        1584usize,
        concat!("Size of: ", stringify!(boot_img_hdr_v4))
    );
    assert_eq!(
        ::core::mem::align_of::<boot_img_hdr_v4>(),
        1usize,
        concat!("Alignment of ", stringify!(boot_img_hdr_v4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).signature_size) as usize - ptr as usize },
        1580usize,
        concat!("Offset of field: ", stringify!(boot_img_hdr_v4), "::", stringify!(signature_size))
    );
}
impl Default for boot_img_hdr_v4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, AsBytes, FromBytes)]
pub struct vendor_boot_img_hdr_v4 {
    pub _base: vendor_boot_img_hdr_v3,
    pub vendor_ramdisk_table_size: u32,
    pub vendor_ramdisk_table_entry_num: u32,
    pub vendor_ramdisk_table_entry_size: u32,
    pub bootconfig_size: u32,
}
#[test]
fn bindgen_test_layout_vendor_boot_img_hdr_v4() {
    const UNINIT: ::core::mem::MaybeUninit<vendor_boot_img_hdr_v4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<vendor_boot_img_hdr_v4>(),
        2128usize,
        concat!("Size of: ", stringify!(vendor_boot_img_hdr_v4))
    );
    assert_eq!(
        ::core::mem::align_of::<vendor_boot_img_hdr_v4>(),
        1usize,
        concat!("Alignment of ", stringify!(vendor_boot_img_hdr_v4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).vendor_ramdisk_table_size) as usize - ptr as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v4),
            "::",
            stringify!(vendor_ramdisk_table_size)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).vendor_ramdisk_table_entry_num) as usize - ptr as usize
        },
        2116usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v4),
            "::",
            stringify!(vendor_ramdisk_table_entry_num)
        )
    );
    assert_eq!(
        unsafe {
            ::core::ptr::addr_of!((*ptr).vendor_ramdisk_table_entry_size) as usize - ptr as usize
        },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v4),
            "::",
            stringify!(vendor_ramdisk_table_entry_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).bootconfig_size) as usize - ptr as usize },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_boot_img_hdr_v4),
            "::",
            stringify!(bootconfig_size)
        )
    );
}
impl Default for vendor_boot_img_hdr_v4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct vendor_ramdisk_table_entry_v4 {
    pub ramdisk_size: u32,
    pub ramdisk_offset: u32,
    pub ramdisk_type: u32,
    pub ramdisk_name: [u8; 32usize],
    pub board_id: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_vendor_ramdisk_table_entry_v4() {
    const UNINIT: ::core::mem::MaybeUninit<vendor_ramdisk_table_entry_v4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<vendor_ramdisk_table_entry_v4>(),
        108usize,
        concat!("Size of: ", stringify!(vendor_ramdisk_table_entry_v4))
    );
    assert_eq!(
        ::core::mem::align_of::<vendor_ramdisk_table_entry_v4>(),
        1usize,
        concat!("Alignment of ", stringify!(vendor_ramdisk_table_entry_v4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_ramdisk_table_entry_v4),
            "::",
            stringify!(ramdisk_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_ramdisk_table_entry_v4),
            "::",
            stringify!(ramdisk_offset)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_ramdisk_table_entry_v4),
            "::",
            stringify!(ramdisk_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ramdisk_name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_ramdisk_table_entry_v4),
            "::",
            stringify!(ramdisk_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).board_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vendor_ramdisk_table_entry_v4),
            "::",
            stringify!(board_id)
        )
    );
}
