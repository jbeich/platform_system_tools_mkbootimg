{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aca10d97_aeaf5c32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2029640
      },
      "writtenOn": "2023-08-22T22:37:45Z",
      "side": 1,
      "message": "Just to double check. Are we intentionally not putting it in our GBL repo \"platform/bootable/libbootloader\"?",
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68fd116a_9bff9b57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-22T22:43:07Z",
      "side": 1,
      "message": "The rationale for keeping it in AOSP is to make it easier to keep in sync with the C definition and make it easier to discover for anyone else using this implementation.\nI agree that there\u0027s a trade-off; we now need to tie together more build artifacts across multiple repositories. I do think that keeping the rust definitions in sync is the bigger problem, though.",
      "parentUuid": "aca10d97_aeaf5c32",
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f82afbce_db5bef9a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "Just few nits in comments.",
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c01b6742_6f6798c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2029640
      },
      "writtenOn": "2023-08-22T23:30:05Z",
      "side": 1,
      "message": "I see. One other thing to I want to surface is that our UEFI toolchain is a standalone bazel build system in the GBL repo, similar to u-boot-mainline. If the library lives in a different repo, integrating it into the UEFI build will be trickier. Basically we\u0027ll need to pull down the repo during build, or pre-compile the library into a prebuilt, check it out and link in the GBL repo. If we need to make changes, we\u0027ll also need to additionally make a change to roll the dependency. If we are fine with this and don\u0027t expect the library to change a lot, this is probably ok.",
      "parentUuid": "68fd116a_9bff9b57",
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db437d87_b673cb8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-23T23:29:17Z",
      "side": 1,
      "message": "IMO keeping it with the C source-of-truth is optimal, it would be too easy to get out-of-sync otherwise. We\u0027re going to have to figure out how to integrate Rust code from AOSP into the bootloader regardless, because the Rust libavb wrapper is also going to live in `//external/avb` and not in `//bootable/libbootloader`\n\n(Of course, this also depends on getting the approval of the owners in this directory to land Rust wrappers, if they disagree we\u0027d have to keep this in `libbootloader` instead)",
      "parentUuid": "c01b6742_6f6798c2",
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eab445f_f7f2fe81",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "I think it might be more readable like this:\n```\npub const BOOT_MAGIC: [u8; BOOT_MAGIC_SIZE] \u003d *b\"ANDROID!\";\n```\nor I\u0027ve also seen\n```\npub const BOOT_MAGIC: \u0026[u8] \u003d b\"ANDROID!\";\n```\n\nBtw, not sure if `BOOT_MAGIC_SIZE` is needed, we might be able to use `BOOT_MAGIC.len()`",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 95
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "064f4e0a_6adafd37",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "That\u0027s much, much better. I was uncertain of how to do the slice-\u003earray conversion plus the constant definition, but it\u0027s all better now.",
      "parentUuid": "9eab445f_f7f2fe81",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 95
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11eb2467_21a833ad",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 34,
        "endChar": 53
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ee7bd36_2de29151",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11eb2467_21a833ad",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 34,
        "endChar": 53
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94c5b0b4_a78d5254",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "nit: I\u0027ve noticed in multiple places that `///` comments go first, then all `#[...]` and then `struct` it all corresponds to. But I don\u0027t think there is strict formatting guide on this.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 61,
        "endChar": 60
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfbf9697_ae7d8e70",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "If that is the convention I will move stuff around.",
      "parentUuid": "94c5b0b4_a78d5254",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 61,
        "endChar": 60
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edf400a4_d72f3ca7",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "Not sure about use case, maybe we could use `enum` here:\n```\n#[repr(u32)]\n#[derive(Clone, Copy, Debug, Eq, PartialEq)]\npub enum VendorRamdiskType {\n    /// Indicates the value is unspecified.\n    NONE \u003d 0,\n    /// Ramdisk contains platform specific bits, so the bootloader should always load these into memory.\n    PLATFORM \u003d 1,\n    /// Ramdisk contains recovery resources, so the bootloader should load these when booting into recovery.\n    RECOVERY \u003d 2,\n    /// Ramdisk contains dynamic loadable kernel modules.\n    DLKM \u003d 3,\n}\n```\nUpdate: I see it is used in C structure, so it is not suitable.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f96bb997_f84eeaea",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "In particular, with the version of `zerocopy` in use in AOSP, it is not possible to derive a `FromBytes for a `[repr(u32)]` enum. It\u0027s not entirely clear why, so I determined that using explicit constants was easier.",
      "parentUuid": "edf400a4_d72f3ca7",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 73,
        "endChar": 1
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bac098c_42d3abc6",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "maybe `ID_SIZE` to make it consistent?",
      "range": {
        "startLine": 150,
        "startChar": 17,
        "endLine": 150,
        "endChar": 19
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11acd36f_9cb0c407",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "Since I took away the `BOOT_MAGIC_SIZE` and `VENDOR_BOOT_MAGIC_SIZE`, I think it\u0027s okay to have users call `id.len()` here, or `size_of_val(\u0026hdr.id)`.",
      "parentUuid": "1bac098c_42d3abc6",
      "range": {
        "startLine": 150,
        "startChar": 17,
        "endLine": 150,
        "endChar": 19
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0862c3a7_075cb6cf",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-23T22:47:48Z",
      "side": 1,
      "message": "sounds good",
      "parentUuid": "11acd36f_9cb0c407",
      "range": {
        "startLine": 150,
        "startChar": 17,
        "endLine": 150,
        "endChar": 19
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e61da836_56975945",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 2029650
      },
      "writtenOn": "2023-08-22T23:20:57Z",
      "side": 1,
      "message": "does it make sense to make reserved fields private?",
      "range": {
        "startLine": 326,
        "startChar": 4,
        "endLine": 326,
        "endChar": 27
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a489b95d_8e4463aa",
        "filename": "src/bootimg.rs",
        "patchSetId": 2
      },
      "lineNbr": 326,
      "author": {
        "id": 2029635
      },
      "writtenOn": "2023-08-23T18:02:00Z",
      "side": 1,
      "message": "Good question. In `bootimg.h`, I believe that these bytes are reserved specifically to pad the fields of the struct so that the version starts at byte 40. I don\u0027t _think_ they contain any data, so making the field private could help communicate that.",
      "parentUuid": "e61da836_56975945",
      "range": {
        "startLine": 326,
        "startChar": 4,
        "endLine": 326,
        "endChar": 27
      },
      "revId": "180baf916e0bf56172db4e2b5cb076a41901e4c6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}