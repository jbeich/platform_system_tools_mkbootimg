{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "299ccd9d_8cf6bab4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-12-10T12:20:35Z",
      "side": 1,
      "message": "duh\nTEST_MAPPING DOESNT work as I expect...",
      "revId": "428584cc58eff9440f3d16b52664860116f51ca4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7be422b_dc5da52f",
        "filename": "tests/mkbootimg_test.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-12-10T20:47:32Z",
      "side": 1,
      "message": "Instead of doing this, why not just \n\n    expected_output \u003d \"\"\"boot_magic: VNDRBOOT\nvendor boot image header version: 4\nvendor ramdisk total size: 12288\n...\n\"\"\"\n    output \u003d \"\\n\".join(line.strip() for line in result.stdout.splitlines())\n    self.assertIn(expectedOutput, output)\n\nIt is not the exact substitute of subsequence_of, but I think it is more straightforward.",
      "range": {
        "startLine": 90,
        "startChar": 19,
        "endLine": 90,
        "endChar": 33
      },
      "revId": "428584cc58eff9440f3d16b52664860116f51ca4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220a11a6_3e8a2e34",
        "filename": "tests/mkbootimg_test.py",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-12-11T04:07:51Z",
      "side": 1,
      "message": "We need subsequence check here because the list of expected_output intentionally omits uninteresting lines, such as \u0027]\u0027, \u0027}\u0027 and lines that are not tested by this test case. Plus the order of lines are important because the ramdisk table entries are ordered. that\u0027s why I cannot use inclusion test here.",
      "parentUuid": "c7be422b_dc5da52f",
      "range": {
        "startLine": 90,
        "startChar": 19,
        "endLine": 90,
        "endChar": 33
      },
      "revId": "428584cc58eff9440f3d16b52664860116f51ca4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce715d06_0ba9ef43",
        "filename": "tests/mkbootimg_test.py",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2020-12-10T20:47:32Z",
      "side": 1,
      "message": "nit: self.assertTrue(msg, ...)?",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 99,
        "endChar": 30
      },
      "revId": "428584cc58eff9440f3d16b52664860116f51ca4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e029792_4a2b49be",
        "filename": "tests/mkbootimg_test.py",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 1337669
      },
      "writtenOn": "2020-12-11T04:07:51Z",
      "side": 1,
      "message": "The default error message header(prefix?) of assert true is not very useful, and it\u0027s difficult to format this message nicely. So I just composed the message separately and called fail() directly",
      "parentUuid": "ce715d06_0ba9ef43",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 99,
        "endChar": 30
      },
      "revId": "428584cc58eff9440f3d16b52664860116f51ca4",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}